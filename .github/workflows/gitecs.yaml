name: CI/CD with Docker, ECR, and ECS

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    env:
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      ECR_REPOSITORY: contianers
      IMAGE_TAG: ${{ github.sha }}
      ECS_CLUSTER: food-order-app
      ECS_BACKEND_SERVICE: backend-service
      ECS_BACKEND_TASK_DEFINITION: backend_task_definition.json
      ECS_DATABASE_SERVICE: database-service
      ECS_DATABASE_TASK_DEFINITION: database_task_definition.json
      ECS_FRONTEND_SERVICE: frontend-service
      ECS_FRONTEND_TASK_DEFINITION: frontend_task_definition.json

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Authenticate to AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: Build, tag, and push frontend image
        id: build-image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:frontend-$IMAGE_TAG ./frontend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:frontend-$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      - name: Build, tag, and push backend image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:backend-$IMAGE_TAG ./backend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:backend-$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:backend-$IMAGE_TAG" >> $GITHUB_ENV
      - name: Build, tag, and push database image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:database-$IMAGE_TAG ./database
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:database-$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:database-$IMAGE_TAG" >> $GITHUB_ENV
#


      - name: Download frontend task definition
        run: |
              cat frontend_task_definition.json > frontend-task-definition.json


      - name: Render Frontend ECS Task Definition
        id: frontend-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
           task-definition: frontend_task_definition.json
           container-name: myfrontend
           image: ${{ steps.build-image.outputs.image }}



      - name: Deploy Amazon ECS frontend task definition
        id: deploy-ecs-task-def
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.frontend-task-def.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Store Task Definition ARN
        if: success() # Only store ARN if deployment was successful
        run: echo "TASK_DEFINITION_ARN=${{ steps.deploy-ecs-task-def.outputs.task-definition-arn }}" >> $GITHUB_ENV
        


      - name: ECS Service
        if: success()
        uses: scribd/amazon-ecs-service-action@v1
        with:
          spec: |
            {
              "cluster": "${{ env.ECS_CLUSTER }}",
              "serviceName": "${{ env.ECS_FRONTEND_SERVICE }}",
              "taskDefinition": "${{ env.TASK_DEFINITION_ARN }}",
              "desiredCount": 1,
              "region": "${{ secrets.AWS_REGION }}",
              "networkConfiguration": {
                "awsvpcConfiguration": {
                  "subnets": [], // Empty array to use default subnets
                  "securityGroups": [], // Empty array to use default security groups
                  "assignPublicIp": "ENABLED" // Enables automatic public IP assignment
                }
              }
            }
          force-new-deployment: true
          wait-until-deployment-complete: true
      

      - name: Delete ECS Service
        uses: scribd/amazon-ecs-service-action@v1
        with:
          spec: |
           {
            "cluster": "${{ env.ECS_CLUSTER }}",
            "serviceName": "${{ env.ECS_FRONTEND_SERVICE }}"
            }
          action: delete
          force-delete: true